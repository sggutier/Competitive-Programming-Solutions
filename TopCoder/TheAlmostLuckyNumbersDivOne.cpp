#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

long long pot( int pos, int N, bool w ) {
	if( pos==N )
		return 1LL ;
	if( w ) 
		return ( 1LL<<(N-pos-1)  )*( (N-pos)*8LL ) + (1LL<<(N-pos));
	return (1LL<<(N-pos) ) ;
}

long long busca( int pos, int N, string S, bool w ) {
	if( pos==N ) {
		return 1LL ;
	}
	long long res = 0LL ;
	int i ;
	for( i=0; i+'0'<S[pos]; i++ ) {
		if( i==4 || i==7 ) 
			res += pot( pos+1, N, w ) ;
		else if( w && (pos!=0 || i!=0 ) ) 
			res += pot( pos+1, N, 0 ) ;
	}
	if( i==4 || i==7 )
		res += busca( pos+1, N, S, w ) ;
	else if( w ) 
		res += busca( pos+1, N, S, 0 ) ;
	
	for( i=0; i+'0'<S[pos]; i++ ) {
		if( i==4 || i==7 ) 
			cout << pot( pos+1, N, w ) << " ";
		else if( w && (pos!=0 || i!=0 ) ) 
			cout << pot( pos+1, N, 0 ) << " " ;
	}
	
	if( pos==0 && S[pos] != '0' ) {
		res ++ ;
		for( pos++; pos<N; pos++ ) {
			res += ( 1LL<<(N-pos-1)  )*( (N-pos-1)*8LL +7LL ) + (1LL<<(N-pos))  ;
		}
	}

	return res ;
}

class TheAlmostLuckyNumbersDivOne {
public:
	long long find(long long a, long long b) {
		char K[100] ;
		string S ;
		long long res ;
		sprintf( K, "%lld", b ) ;
		S = K ;
		res = busca( 0, S.size(), S, 1 ) ;
		sprintf( K, "%lld", a-1 ) ;
		S = K ;
		res -= busca( 0, S.size(), S, 1 ) ;
		
		return res ;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	TheAlmostLuckyNumbersDivOne *obj;
	long long answer;
	obj = new TheAlmostLuckyNumbersDivOne();
	clock_t startTime = clock();
	answer = obj->find(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	long long p2;
	
	{
	// ----- test 0 -----
	p0 = 4ll;
	p1 = 7ll;
	p2 = 4ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 8ll;
	p1 = 19ll;
	p2 = 4ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 28ll;
	p1 = 33ll;
	p2 = 0ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 12345678900ll;
	p1 = 98765432100ll;
	p2 = 91136ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
