#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class TheNumbersWithLuckyLastDigit {
public:
	int find(int n) {
		if( n<90 ) {
			int minP[105] ;
			fill( minP, minP+105, (1<<30) ) ;
			minP[0] = 0 ;
			
			for( int sum = 0; sum*10<=n; sum ++ ) {
					for( int i = 0; i<=n-(sum*10+4); i++ ) {
					minP[ i+(sum*10+4) ] = min( minP[ i+(sum*10+4) ], minP[i] + 1 ) ; 
				}
				for( int i = 0; i<=n-(sum*10+7); i++ ) {
					minP[ i+(sum*10+7) ] = min( minP[ i+(sum*10+7) ], minP[i] + 1 ) ; 
				}
			}
			
			if( minP[n] == (1<<30) )
				return -1 ;
			return minP[n] ;		
		}
		
		deque <int> q ;
		int minP[20] ;
		fill( minP, minP+20, (1<<30) ) ;
		
		minP[n%10 +10 ] = 0 ;
		q.push_back( n%10 +10 ) ;
		while ( !q.empty() ) {
			int pos = q.front() ;
			q.pop_front() ;
			if( minP[ (pos+6)%10 ] > minP[pos]+1  ) {
				minP[ (pos+6)%10 ] = minP[pos]+1 ;
				q.push_back( (pos+6)%10 ) ;
			}
			if( minP[ (pos+3)%10 ] > minP[pos]+1  ) {
				minP[ (pos+3)%10 ] = minP[pos]+1 ;
				q.push_back( (pos+3)%10 ) ;
			}
		}
		
		return minP[0] ;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	TheNumbersWithLuckyLastDigit *obj;
	int answer;
	obj = new TheNumbersWithLuckyLastDigit();
	clock_t startTime = clock();
	answer = obj->find(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = 99;
	p1 = 4;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 11;
	p1 = 2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 13;
	p1 = -1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1234567;
	p1 = 1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
