#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
#define mod 1000000007


class AlgridTwo {
public:
	int makeProgram(vector <string> output) {
		int n = output.size(), m=output[0].size() ;
		vector <string> input = output ;
		int res = 1 ;
		
		for( int i=0; i<n; i++ ) {
			for( int j=0; j<m; j++ )
				input[i][j] = '?' ;
		}
		
		for( int i=0; i<n; i++ ) {
			for( int j=0; j<m; j++ ) {
				if( input[i][j] != '?' ) {
					res = (res*2)%mod ;
					if( input[i][j] != output[i][j] )
						return 0 ;
				}
			}
			if( i==n-1 )
				continue ;
			for( int j=0; j+1<m; j++ ) {
				int tmp = 0 ;
				if( output[i][j] == 'B' )
					tmp ++ ;
				if( output[i][j+1] == 'B' )
					tmp += 2 ;
				if( tmp == 1 ) {
					input[i+1][j+0] = 'B' ;
					input[i+1][j+1] = 'B' ;
				}
				else if( tmp==2 ) {
					input[i+1][j+0] = 'W' ;
					input[i+1][j+1] = 'W' ;
				}
				else if( tmp==3 ) {
					swap( input[i+1][j], input[i+1][j+1] ) ;
				}
			}
		}
		
		return res ;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	AlgridTwo *obj;
	int answer;
	obj = new AlgridTwo();
	clock_t startTime = clock();
	answer = obj->makeProgram(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"BB","WB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"BBWBBB","WBWBBW"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"BWBWBW","WWWWWW","WBBWBW"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"WWBWBWBWBWBWBWBW","BWBWBWBWBWBWBWBB","BWBWBWBWBWBWBWBW"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 73741817;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
